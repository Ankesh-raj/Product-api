// <auto-generated />
using System;
using DataLayer.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityLayer.Article", b =>
                {
                    b.Property<Guid>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArticleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("colourId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("productId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArticleId");

                    b.HasIndex("colourId");

                    b.HasIndex("productId");

                    b.ToTable("tbl_article");
                });

            modelBuilder.Entity("EntityLayer.Colour", b =>
                {
                    b.Property<Guid>("colourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("colourCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("colourName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("colourId");

                    b.ToTable("color_tbl");
                });

            modelBuilder.Entity("EntityLayer.Createcredit", b =>
                {
                    b.Property<int>("creditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("createDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("createdBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("creditId");

                    b.ToTable("tbl_createcredit");
                });

            modelBuilder.Entity("EntityLayer.Product", b =>
                {
                    b.Property<Guid>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("channelId")
                        .HasColumnType("int");

                    b.Property<string>("productCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("productYear")
                        .HasColumnType("int");

                    b.Property<Guid>("sizeScaleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("productId");

                    b.HasIndex("sizeScaleId");

                    b.ToTable("tb1_product");
                });

            modelBuilder.Entity("EntityLayer.Size", b =>
                {
                    b.Property<Guid>("sizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("sizeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("sizeId");

                    b.ToTable("tb1_size");
                });

            modelBuilder.Entity("EntityLayer.Article", b =>
                {
                    b.HasOne("EntityLayer.Colour", "colour")
                        .WithMany()
                        .HasForeignKey("colourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Product", null)
                        .WithMany("articles")
                        .HasForeignKey("productId");
                });

            modelBuilder.Entity("EntityLayer.Product", b =>
                {
                    b.HasOne("EntityLayer.Size", "size")
                        .WithMany()
                        .HasForeignKey("sizeScaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
